# -*- generated by 1.0.9 -*-
import da
PatternExpr_258 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_263 = da.pat.BoundPattern('_BoundPattern264_')
PatternExpr_278 = da.pat.TuplePattern([da.pat.ConstantPattern('Value'), da.pat.FreePattern('v')])
PatternExpr_265 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern271_')]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
_config_object = {'channel': 'Reliable', 'handling': 'one'}
import sys

class P(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._PReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_0', PatternExpr_258, sources=[PatternExpr_263], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_1', PatternExpr_278, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_277])])

    def setup(self, ps, v, maxfail, **rest_363):
        super().setup(ps=ps, v=v, maxfail=maxfail, **rest_363)
        self._state.ps = ps
        self._state.v = v
        self._state.maxfail = maxfail
        self._state.x = (- 1)
        self._state.V = {self._state.v: False}
        self._state.receiveflag = False

    def run(self):
        super()._label('start', block=False)
        for i in range(self._state.maxfail):
            super()._label('one_round', block=False)
            for k in self._state.V:
                if (not self._state.V[k]):
                    self.send(('Value', k), to=self._state.ps)
                    self._state.V[k] = True
            super()._label('_st_label_222', block=False)
            _st_label_222 = 0
            while (_st_label_222 == 0):
                _st_label_222 += 1
                if self._state.receiveflag:
                    _st_label_222 += 1
                else:
                    super()._label('_st_label_222', block=True)
                    _st_label_222 -= 1
            else:
                if (_st_label_222 != 2):
                    continue
            if (_st_label_222 != 2):
                break
            self._state.receiveflag = False
        super()._label('end', block=False)
        self.send(('done',), to=self._state.ps)
        self._state.x = max([self._state.v for self._state.v in self._state.V if self._state.V[self._state.v]])
        self.output(('x = %r' % self._state.x))
        super()._label('_st_label_249', block=False)
        p = None

        def UniversalOpExpr_250():
            nonlocal p
            for p in self._state.ps:
                if (not PatternExpr_265.match_iter(self._PReceivedEvent_0, _BoundPattern271_=p, SELF_ID=self._id)):
                    return False
            return True
        _st_label_249 = 0
        while (_st_label_249 == 0):
            _st_label_249 += 1
            if UniversalOpExpr_250():
                _st_label_249 += 1
            else:
                super()._label('_st_label_249', block=True)
                _st_label_249 -= 1

    def _P_handler_277(self, v):
        self._state.receiveflag = True
        if (not (v in self._state.V)):
            self._state.V[v] = False
    _P_handler_277._labels = None
    _P_handler_277._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        n = (int(sys.argv[1]) if (len(sys.argv) > 1) else 10)
        f = (int(sys.argv[2]) if (len(sys.argv) > 2) else 50)
        ps = self.new(P, num=n)
        for (i, p) in enumerate(list(ps)):
            self._setup({p}, (ps, i, f))
        self._start(ps)
