# -*- generated by 1.0.9 -*-
import da
PatternExpr_243 = da.pat.TuplePattern([da.pat.ConstantPattern('access'), da.pat.FreePattern('newtok')])
PatternExpr_255 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c'), da.pat.FreePattern('p')])
PatternExpr_283 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c'), da.pat.BoundPattern('_BoundPattern288_')])
PatternExpr_318 = da.pat.TuplePattern([da.pat.ConstantPattern('access'), da.pat.FreePattern(None)])
PatternExpr_339 = da.pat.TuplePattern([da.pat.ConstantPattern('access'), da.pat.FreePattern('token1')])
PatternExpr_361 = da.pat.TuplePattern([da.pat.ConstantPattern('access'), da.pat.FreePattern('token2')])
PatternExpr_424 = da.pat.TuplePattern([da.pat.ConstantPattern('Done')])
PatternExpr_429 = da.pat.BoundPattern('_BoundPattern430_')
PatternExpr_431 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern437_')]), da.pat.TuplePattern([da.pat.ConstantPattern('Done')])])
_config_object = {}
import sys

class P(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._PReceivedEvent_2 = []
        self._PSentEvent_3 = []
        self._PReceivedEvent_4 = []
        self._PSentEvent_5 = []
        self._PReceivedEvent_6 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_0', PatternExpr_243, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_242]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_1', PatternExpr_255, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_254]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_2', PatternExpr_283, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.SentEvent, '_PSentEvent_3', PatternExpr_318, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_4', PatternExpr_339, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.SentEvent, '_PSentEvent_5', PatternExpr_361, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_6', PatternExpr_424, sources=[PatternExpr_429], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, ps, nrounds, orig_token, **rest_519):
        super().setup(ps=ps, nrounds=nrounds, orig_token=orig_token, **rest_519)
        self._state.ps = ps
        self._state.nrounds = nrounds
        self._state.orig_token = orig_token
        self._state.clock = 0
        self._state.token = dict(((p, 0) for p in self._state.ps))

    def run(self):

        def anounce():
            self.output('In cs!')
        if self.token_present():
            self.output("I'm lucky!")
        for i in range(self._state.nrounds):
            self.cs(anounce)
        self.send(('Done',), to=self._state.ps)
        super()._label('_st_label_415', block=False)
        p = None

        def UniversalOpExpr_416():
            nonlocal p
            for p in self._state.ps:
                if (not PatternExpr_431.match_iter(self._PReceivedEvent_6, _BoundPattern437_=p, SELF_ID=self._id)):
                    return False
            return True
        _st_label_415 = 0
        while (_st_label_415 == 0):
            _st_label_415 += 1
            if UniversalOpExpr_416():
                _st_label_415 += 1
            else:
                super()._label('_st_label_415', block=True)
                _st_label_415 -= 1
        self.output('Done!')

    def cs(self, task):
        super()._label('request', block=False)
        if (not self.token_present()):
            self._state.clock += 1
            self.send(('request', self._state.clock, self._id), to=self._state.ps)
            super()._label('_st_label_210', block=False)
            _st_label_210 = 0
            while (_st_label_210 == 0):
                _st_label_210 += 1
                if self.token_present():
                    _st_label_210 += 1
                else:
                    super()._label('_st_label_210', block=True)
                    _st_label_210 -= 1
        self._state.token[self._id] = self._state.clock
        task()
        super()._label('release', block=False)
        for p in self._state.ps:
            if (self.request_pending(p) and self.token_present()):
                self.send(('access', self._state.token), to=p)
                break

    def request_pending(self, p):
        c = None

        def ExistentialOpExpr_281():
            nonlocal c
            for (_, _, (_ConstantPattern299_, c, _BoundPattern302_)) in self._PReceivedEvent_2:
                if (_ConstantPattern299_ == 'request'):
                    if (_BoundPattern302_ == p):
                        if (c > self._state.token[p]):
                            return True
            return False
        return ExistentialOpExpr_281()

    def token_present(self):

        def ExistentialOpExpr_316():
            for (_, _, (_ConstantPattern332_, _)) in self._PSentEvent_3:
                if (_ConstantPattern332_ == 'access'):
                    if True:
                        return True
            return False
        token1 = token2 = None

        def ExistentialOpExpr_337():
            nonlocal token1, token2
            for (_, _, (_ConstantPattern354_, token1)) in self._PReceivedEvent_4:
                if (_ConstantPattern354_ == 'access'):

                    def ExistentialOpExpr_359(token1):
                        nonlocal token2
                        for (_, _, (_ConstantPattern376_, token2)) in self._PSentEvent_5:
                            if (_ConstantPattern376_ == 'access'):
                                if (token2[self._id] > token1[self._id]):
                                    return True
                        return False
                    if (not ExistentialOpExpr_359(token1=token1)):
                        return True
            return False
        return ((self._state.orig_token and (not ExistentialOpExpr_316())) or ExistentialOpExpr_337())

    def _P_handler_242(self, newtok):
        self._state.token = newtok
    _P_handler_242._labels = None
    _P_handler_242._notlabels = None

    def _P_handler_254(self, c, p):
        if (self.request_pending(p) and self.token_present()):
            self.send(('access', self._state.token), to=p)
    _P_handler_254._labels = None
    _P_handler_254._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        nprocs = (int(sys.argv[1]) if (len(sys.argv) > 1) else 10)
        nrounds = (int(sys.argv[2]) if (len(sys.argv) > 2) else 1)
        ps = self.new(P, num=nprocs)
        p = ps.pop()
        self._setup(ps, ((ps | {p}), nrounds, False))
        self._setup([p], ((ps | {p}), nrounds, True))
        self._start((ps | {p}))
